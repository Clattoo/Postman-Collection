{
	"info": {
		"_postman_id": "15ca4bba-c51e-4990-a752-fae2c09038fa",
		"name": "UDEMY_API_COLLECTION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"// 2. We have all declareted fields in the response\r",
							"pm.test(\"Check that we have all declareted fields\", function() {\r",
							"    const jsonData = pm.response.json()\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\")\r",
							"    pm.expect(jsonData).to.have.property(\"planets\")\r",
							"    pm.expect(jsonData).to.have.property(\"films\")\r",
							"    pm.expect(jsonData).to.have.property(\"species\")\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\")\r",
							"    pm.expect(jsonData).to.have.property(\"starships\")\r",
							"})\r",
							"\r",
							"// 3. Field value is not NULL\r",
							"pm.test(\"Check if value is not NULL\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null)\r",
							"    pm.expect(jsonData.planets).not.equal(null)\r",
							"    pm.expect(jsonData.films).not.equal(null)\r",
							"    pm.expect(jsonData.species).not.equal(null)\r",
							"    pm.expect(jsonData.vehicles).not.equal(null)\r",
							"    pm.expect(jsonData.starships).not.equal(null)\r",
							"})\r",
							"\r",
							"// 4. Field value is not empty\r",
							"pm.test(\"Value is not empty\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\")\r",
							"    pm.expect(jsonData.planets).not.equal(\"\")\r",
							"    pm.expect(jsonData.films).not.equal(\"\")\r",
							"    pm.expect(jsonData.species).not.equal(\"\")\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\")\r",
							"    pm.expect(jsonData.starships).not.equal(\"\")\r",
							"})\r",
							"\r",
							"// 5. Check if field corresponds to a specific value\r",
							"pm.test(\"Check if field corresponds to a specific value\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\");\r",
							"})\r",
							"\r",
							"// 6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 7. Status message is ok\r",
							"pm.test(\"Status message is ok\", function() {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"})\r",
							"\r",
							"// 8. Response time is less than 1000 ms\r",
							"pm.test(\"Response time is less than 1000 ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"// 9. There is a specific header in the response\r",
							"pm.test(\"There is a specific header in the response\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"})\r",
							"\r",
							"// 10. The response has a sepcific header with a specific value\r",
							"pm.test(\"The response has a sepcific header with a specific value\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"// 11. Cookie exists\r",
							"pm.test(\"Cookie exists\", function() {\r",
							"    pm.cookies.has(\"__cfduid\")\r",
							"})\r",
							"\r",
							"// 12. Cookie has value\r",
							"pm.test(\"Cookie has value\", function() {\r",
							"    try{\r",
							"        var my_cookie = pm.cookies.get(\"__cfduid\");\r",
							"        console.log(my_cookie);\r",
							"    } catch(e) {\r",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				},
				"description": "Первые тесты с использованием API. Написание автоматизированных тестов для проверки различных вещей."
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    // specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    // specify requires properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    // describe the properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\": \"string\"},\r",
							"        \"planets\": {\"type\": \"string\"},\r",
							"        \"films\": {\"type\": \"string\"},\r",
							"        \"species\": {\"type\": \"string\"},\r",
							"        \"vehicles\": {\"type\": \"string\"},\r",
							"        \"starships\": {\"type\": \"string\"},\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Body is correct\", function() {\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				},
				"description": "Использование JSON-схемы. Часть 1."
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vechicles\", \"starships\"],\r",
							"    \"property\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"            },\r",
							"        \"species\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"            },\r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"            },\r",
							"        \"starships\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"            },\r",
							"    }\r",
							"};\r",
							"pm.test(\"Body is correct\", function() {\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				},
				"description": "Использование JSON-схемы. Часть 2. Проведение JSON-схемы на определенном запросе (Люк Скайвокер)"
			},
			"response": []
		},
		{
			"name": "https://9717f6c6-fe09-43ee-8aef-d606d6f871c0.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://9717f6c6-fe09-43ee-8aef-d606d6f871c0.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"9717f6c6-fe09-43ee-8aef-d606d6f871c0",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://9717f6c6-fe09-43ee-8aef-d606d6f871c0.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://9717f6c6-fe09-43ee-8aef-d606d6f871c0.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"9717f6c6-fe09-43ee-8aef-d606d6f871c0",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 15 Jun 2021 19:49:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=10d793a89e7cb9f5"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=a9b1837cbbea2da4"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1623786646"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n    }\n}"
				},
				{
					"name": "https://9717f6c6-fe09-43ee-8aef-d606d6f871c0.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Maxim\"}"
						},
						"url": {
							"raw": "https://9717f6c6-fe09-43ee-8aef-d606d6f871c0.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"9717f6c6-fe09-43ee-8aef-d606d6f871c0",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 15 Jun 2021 19:51:54 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=292ff9b4f3d28aa3"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=937d28ba59026632"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "118"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1623786747"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Maxim\",\n        \"status\": \"created\",\n        \"message\": \"Success\"\n    }\n}"
				}
			]
		}
	]
}